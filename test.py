import pandas as pd
import json
import joblib
from sklearn.metrics import accuracy_score

# Define the numerical and categorical features
numerical_features = [
    'File Size (KB)', 'Memory Usage (MB)', 'Battery Usage (%)', 'CPU Usage (%)',
    'Network Traffic (KB/s)', 'Process Count', 'Thread Count', 'I/O Read Rate (MB/s)',
    'I/O Write Rate (MB/s)', 'File Creation Time (Days ago)', 'Last Access Time (Days ago)',
    'File Entropy', 'System Calls per Second', 'Registry Changes Count', 'File Modifications Count',
    'Error Log Count', 'Warning Log Count'
]

categorical_features = [
    'Source IP', 'Destination IP', 'Protocol', 'Admin Privileges Used', 'File Write Permissions'
]

# Load the new test dataset
new_data = pd.read_csv('malware_test_data.csv')  # Replace with the actual test dataset if needed

# Extract the features
X_new_test = new_data[numerical_features + categorical_features]

# Load the trained pipeline
pipeline = joblib.load('trained_pipeline.pkl')

# Load the saved label encoder for consistent label decoding
label_encoder = joblib.load('label_encoder.pkl')

# Encode target variable (Malware Type) in the new test dataset
y_new_test = label_encoder.transform(new_data['Malware Type'])

# Make predictions using the loaded pipeline
y_new_pred = pipeline.predict(X_new_test)

# Calculate the number of correct predictions
correct_predictions = (y_new_pred == y_new_test).sum()
total_predictions = len(y_new_test)
accuracy = accuracy_score(y_new_test, y_new_pred)

# Prepare the results
result = {
    "accuracy": float(accuracy),  # Convert accuracy to a float
    "total_predictions": int(total_predictions),  # Convert to standard Python int
    "correct_percentage": float((correct_predictions / total_predictions) * 100)
}

# Print the results
print(json.dumps(result, indent=4))
