from fastapi import FastAPI, UploadFile, File
from motor.motor_asyncio import AsyncIOMotorClient
import pandas as pd
from model import load_models, predict_malware
from test import evaluate_accuracy

app = FastAPI()

# MongoDB setup
client = AsyncIOMotorClient("mongodb://localhost:27017")
db = client['malware_detection_system']
collection = db['detection_logs']

# Load pre-trained models
rf_model, catboost_model, stacking_model = load_models()

@app.post("/upload/")
async def upload_file(file: UploadFile = File(...)):
    data = pd.read_csv(file.file)  # Process uploaded file
    predictions = predict_malware(data, stacking_model)
    accuracy, incorrect_preds = evaluate_accuracy(data, predictions)

    # Additional processing, MongoDB logging, etc.
    category_distribution = data['malware_type'].value_counts().to_dict()
    memory_usage = data.groupby('malware_type')['memory_usage'].sum().to_dict()
    battery_usage = data.groupby('malware_type')['battery_consumption'].sum().to_dict()
    network_usage = data.groupby('malware_type')['network_traffic'].sum().to_dict()

    # Log to MongoDB
    log = {
        "accuracy": accuracy,
        "incorrect_predictions": incorrect_preds.to_dict(),
        "category_distribution": category_distribution,
        "memory_usage": memory_usage,
        "battery_usage": battery_usage,
        "network_usage": network_usage,
    }
    await collection.insert_one(log)

    return {
        "accuracy": accuracy,
        "incorrect_predictions": incorrect_preds.to_dict(),
        "category_distribution": category_distribution,
        "memory_usage": memory_usage,
        "battery_usage": battery_usage,
        "network_usage": network_usage
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
